<?php

namespace phpbb\db\collection;

use DateTime;
use DateTimeInterface;
use phpbb\errors\ServerError;
use Ramsey\Uuid\Uuid;

class field
{
    const TYPE_STRING = 'string';
    const TYPE_INTEGER = 'integer';
    const TYPE_FLOAT = 'float';
    const TYPE_DATE = 'date';
    const TYPE_DATETIME = 'datetime';
    const TYPE_TIME = 'time';
    const TYPE_UUID = 'uuid';
    const TYPE_OBJECT = 'object';

    const INDEX_FIELD = 'field';
    const INDEX_UNIQUE = 'unique';

    const AUTOGENERATED = 'autogenerated';

    private string $name;
    private string $type;
    private mixed $default; 

    public function __construct(string $name, mixed $default, string $type = self::TYPE_STRING)
    {
        $this->name = $name;
        $this->default = $default;
        $this->type = $type;
        if ($type == self::TYPE_UUID && $default == self::AUTOGENERATED) {
            $this->default = (string) Uuid::uuid4();
        }
    }

    public function __toString()
    {
        return $this->name;
    }

    public function default() {
        return $this->default;
    }

    public function process($value = false)
    {
        if ($value === false) {
            return $this->default;
        }
        switch($this->type) {
            case self::TYPE_UUID: return (string) $value;
            case self::TYPE_STRING: return (string) $value;
            case self::TYPE_INTEGER: return (int) $value;
            case self::TYPE_FLOAT: return (float) $value;
            case self::TYPE_OBJECT: return (object) $value;
            case self::TYPE_DATE: 
            case self::TYPE_DATETIME: 
            case self::TYPE_TIME: 
                if (!$value instanceof DateTimeInterface) {
                    return new DateTime($value);
                }
                return $value;
            default:
                throw new ServerError(sprintf(ServerError::UNDEFINED_DATA_FORMAT, $this->type));
        }
    }
}